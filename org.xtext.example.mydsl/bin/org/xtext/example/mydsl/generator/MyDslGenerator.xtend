/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import tP1_EM.State
import tP1_EM.StateMachine
import tP1_EM.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		fsa.generateFile('State.java', generateAbstractState)
		fsa.generateFile('Transition.java', generateAbstractTransition)
		fsa.generateFile('StateMachine.java', generateStateMachine)
		var myfsm = resource.contents.get(0) as StateMachine
		myfsm.state.forEach[ s | fsa.generateFile(s.name + '.java', print(s))]
		myfsm.transition.forEach[t | fsa.generateFile(t.name + '.java', print(t))]
	}
	
	def generateAbstractState(){
'public abstract class State {
	String name;
	Transition incoming;
	Transition outgoing;
	
	public State(){
		this.name = "";
		this.incoming = null;
		this.outgoing = null;
	}
	public State(String _name, Transition _incoming, Transition _outgoing){
		this.name = _name;
		this.incoming = _incoming;
		this.outgoing = _outgoing;
	}
	public State(State state){
		this.name = state.getName();
		this.incoming = state.getIncoming();
		this.outgoing = state.getOutgoing();
	}
	public abstract void setName(String _name);
	public abstract String getName();
	public abstract void setIncoming(Transition _incoming);
	public abstract Transition getIncoming();
	public abstract void setOutgoing(Transition _outgoing);
	public abstract Transition getOutgoing();
}'
	}
	
	def print(State s) {
'public class ' + s.name + ' extends State {
	@Override
	public void setName(String _name){
		name = _name;
	}
	@Override
	public String getName(){
		return name;
	}
	@Override
	public void setIncoming(Transition _incoming){
		incoming = _incoming;
	}
	@Override
	public Transition getIncoming(){
		return incoming;
	}
	@Override
	public void setOutgoing(Transition _outgoing){
		outgoing = _outgoing;
	}
	@Override
	public getOutgoing(){
		return outgoing;
	}
}'
	}

	def generateAbstractTransition(){
'public class Transition {
	String name;
	State from;
	State to;

	public Transition(){
		this.name = "";
		this.from = null;
		this.to = null;
	}
	public Transition(String _name, State _from, State _to){
		this.name = _name;
		this.from = _from;
		this.to = _to;
	}
	public Transition(Transition transition){
		this.name = transition.getName();
		this.from = transition.getFrom();
		this.to = transition.getTo();
	}
	public abstract String getName();
	public abstract void setName(String name);
	public abstract State getFrom();
	public abstract void setFrom(State state);
	public abstract State getTo();
	public abstract void setTo(State state);	
}'	
	}

	def print(Transition t){
'public class ' + t.name + ' extends Transition {
	@Override
	public String getName(){
		return this.name;
	}
	@Override
	public void setName(String name){
		this.name = name;
	}
	@Override
	public State getFrom(){
		return this.from;
	}
	@Override
	public void setFrom(State state){
		this.from = state;
	}
	@Override
	public State getTo(){
		return this.to;
	}
	@Override
	public void setTo(State state){
		this.to = state;
	}
}'
	}

	def generateStateMachine(){
'import java.util.ArrayList;

public class StateMachine {
	private String name;
	private ArrayList<State> states;
	private ArrayList<Transition> transitions;

	public StateMachine(){
		this.name = "";
		this.states = new ArrayList<State>();
		this.transitions = new ArrayList<Transition>();
	}

	public StateMachine(String _name, ArrayList<State> _states, ArrayList<Transition> _transitions){
		this.name = _name;
		this.states = _states;
		this.transitions = _transitions;
	}

	public void addState(State state){
		this.states.add(state);
	}
	
	public void deleteState(int index){
		this.states.remove(index);
	}

	public void addTransition(Transition transition){
		this.transitions.add(transition);
	}

	public void deleteTransition(int index){
		this.transitions.remove(index);
	}

	public String getName(){
		return this.name;
	}

	public void setName(String name){
		this.name = _name;
	}

	public ArrayList<State> getStates(){
		return this.states;
	}

	public void setStates(ArrayList<State> states){
		this.states = states;
	}

	public ArrayList<Transition> getTransitions(ArrayList<Transitions> transitions){
		return this.transitions;
	}

	public void setTransitions(ArrayList<Transitions> transitions){
		this.transitions = transitions;
	}
}'
	}
}
